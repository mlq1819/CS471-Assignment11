Michael Quinn

1a. Use interactive Haskell
	Got it?

1b. Commands
	Yup
	
1c. There's a book
	nice

2f)
	factorial 5 returns 120, which is indeed the factorial of 5. The inferred type of "factorial" is "(Eq p, Num p) => p -> p", which seems to mean it takes an object p which is both a Num and of class "Eq", and returns another object p which is of the same classes.
	
3) write some code; I wrote some code

4) Run experiments; what happens and why?
	All three return the same values for inputs of 12 and 13, but fact1 returns 0 instead of what is presumably the correct answer (which factorial and fact2 both return). I believe that factorial and fact2 both end up using a larger type than fact1, which uses Int, and due to the differences between these two, Integer ends up used by factorial and fact2. If this is the case, Integer is a more stable/better version of Int. If it is similar to the language Idris that I worked on for a presentation, it is then because Integer can theoretically hold a value of any size, while Int is limited to a maximum value, which could easily be reached through this means.

5. More experiments: factorial (-2) and factorial -2
The first one causes a stack overflow from recursive function calls. The second causes a syntax error, as "-2" is technically of a different type than (-2), since it inspects the "-" separately in that context from the "2".

6. More edits, write a thing and test it
	K, wrote it and tested it

7. More edits, use guards; how many basic types can factG accept? What happens on factG (-2)?
	Assuming "accept" means that it can run using a value of that data type without producing an error, factG can accept two basic types: namely, Int and Integer. This is because it only allows values that can be compared, which Float should be part of, but by the definition of the function and through recursion, it will always eventually recurse using a negative number if provided a float.
	Speaking of which, running factG on (-2) produces the user-defined error of "Exception: neg x".
	
8. More edits, add factI and factE. Type some expressions; what happens and why? Type some more; what happens, and guess why it does?
	For the first set of prompts, all three prompts produce errors. Calling factorial on a Float causes a stack overflow, as its definition technically uses no functions or operators that don't work on Floats, and doesn't exclude them, though the function definition itself will only ever end when the provided value is decremented to 0 through units of 1, which can never happen when the provided value is a float. The second prompt causes a user-provided exception for neg x, for the same reason as both the previous question and previous prompt: it recurses into a negative value, which isn't accepted by the function definition. The third error is the first error that happens before the function is called; it instead only accepts Integers, and passing it a Float causes a "No instance" error for fractional integers.
	For the second set of prompts, the first prompt to factI returns the correct value, while the second prompt to factE causes a stack overflow error. The only difference between the two functions occurs within their recursive case, so we know the error to be there. That difference is the presence of parentheses surrounding the parameter expression for the recursive call in the first prompt, and its absence in the second prompt. These parentheses allow the first prompt to correctly evaluate the expression, then pass that onto the recursive call, while in the second prompt, the parameter expression is instead treated as a section of a larger return expression, and only the "n" in the parameter expression is actually passed as a parameter to the recursive call, meaning that every recursive call will pass the same parameter as it was originally given without modification. This causes an infinite recursive loop, which overflows the function call stack.
	
	
Part 2 - Curried functions
1. Edit it again, and add a comment and a definition. Evaluate a number of expressions. What is the inferred type of prodT?
	Assumption: I would assume it is p, p, p -> p, or maybe Eq, Eq, Eq -> Eq
	Actual: It is Num a => (a, a, a) -> a

2. Edit it again, add a comment and a definition. evaluate an expression. What is the inferred type of prodC?
	Assumption: realistically, it should follow the same format as the previous one, Num a => (a, a, a) -> a. That said, I don't expect this question would be here if they were the same, and knowing how Haskell likes to be weird about subsequent parameters, I'll go with Num a a a => (a, a, a) -> a
	Actual: Oddly, it is Num a => a -> a -> a -> a. I'm guessing the first three a's after the => are referencing "a b c", and the reason it's like that is because it goes to evaluate using only the first, then checks for the second, then checks for the third. The fourth a is the output.

3. Edit it again, and add a definition. Run "prodCx 2 3 4" and give the value. Run ":t prodCx" and show the type. How does its type compare to prodC?
	The first prompt returns the correct value of 24.
	The second prompt returns Num a => a -> a -> a -> a
	I was sort of expecting this, but the typing of prodCx is the same as of prodC. The parentheses in the definition must then just be an explicit redefinition of how it would type the function by default without the parentheses, sort of like saying y = ((mx)+b): it follows the default ordering of the terms.
	Following that, then my reasoning from 2.2 might be correct, in that it evaluates each part of it separately from the rest, rather than together as a cohesive unit of variables.

4. Edit it again, and add a definition. They don't have arguments, is this legal? If it is legal, predict each type.
	Assumption: Firstly, each references either prodC, either directly or indirectly through each other, so clarifying prodC's typing is useful. prodC is of type Num a => a -> a -> a -> a, so most others might follow from that.
	I think that most of these definitions are probably legal, except for prodC2 and prod3. All of them will be some start leading into prodC's type, since they all reference it eventually. Starting with prodC1, I believe its type will be Eq => a -> a -> a -> a -> a. I feel that prodC12 will be similar, but as Eq => a -> a -> a -> a -> a -> a instead.
	Actual